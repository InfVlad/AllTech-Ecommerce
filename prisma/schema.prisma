// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Shop

model Product {
  id          String      @id @default(cuid())
  title       String      @unique
  image       String?
  description String?
  quantity    Int
  price       Float
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  orderItems  OrderItem[]
  CartItem    CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  deleted     Boolean     @default(false) // soft delete

  @@index([categoryId])
}

model CartItem {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  price     Float
  cart      Cart    @relation(fields: [cartId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cartId    String

  @@index([productId])
  @@index([cartId])
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?    @unique
  items     CartItem[]

  @@index([userId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  image       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  products    Product[]
}

enum Status {
  Created
  NotPaid
  Processing
  Failed
  Paid
}

model OrderItem {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  price     Float
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
}

model Order {
  id                        String      @id @default(cuid())
  user                      User        @relation(fields: [userId], references: [id], onDelete: Cascade) // should i delete the orders?
  userId                    String
  status                    Status      @default(Created)
  orderItems                OrderItem[]
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime?
  stripePaymentIntentId     String?
  stripePaymentClientSecret String?

  @@index([userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  User
  Admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  Cart          Cart?
  orders        Order[]
  role          Role      @default(User)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
